<project name="Build specific targets and properties">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${builder}/ant-contrib.jar" />
	<!--taskdef resource="org/pluginbuilder/anttasks/pluginbuildertasks.properties" classpath="${builder}/pluginbuilder-anttasks.jar" /-->

	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}" >
			<property name="type" value="feature" />
			<property name="id" value="org.erlide" />
		</ant>
	</target>
	
	<target name="assemble.org.erlide">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}">
			<property name="zipargs" value="" />
		</ant>
	</target>
	
	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles">
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup" if="${product}">	
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
		<!-- fail unless="featureVersion" message="Property featureVersion must be set.
		 Either directly or in case of a nightly build with nightlyBuildFeatureVersionPrefix." />
		 -->
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
		<property file="${buildDirectory}/finalFeaturesVersions.properties" prefix="versions"/>
		<propertycopy name="realFeatureVersion" from="versions.org.erlide"/>

		<property name="p2.root.name" value="erlide"/>
		<property name="p2.root.version" value="${realFeatureVersion}"/>
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do before/after packaging RCP. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>
	
	<target name="postPackage">
		<!-- copy build results for rcp build -->
		<copy todir="${buildResultsDirectory}" flatten="true">
			<fileset dir="${buildDirectory}" includes="*-${buildType}/*.zip" />
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild" depends="-prepareBuildResultsDirectory" unless="no.postBuild">
		<antcall target="runTests"/>
		<copy todir="${buildResultsDirectory}" flatten="true">
			<fileset dir="${buildDirectory}" includes="*-${buildType}/*.zip" />
		</copy>
		<antcall target="callExternalPostBuild"/>
	</target>
	<!-- ===================================================================== -->
	<!-- Run tests. -->
	<!-- ===================================================================== -->
	<target name="runTests" if="isRunTests">
		<property name="automatedTestsHome" location="${builder}/automatedTests"/>

		<ant antfile="${automatedTestsHome}/run-tests.xml" target="run" dir="${automatedTestsHome}">
			<property name="test.result.dir" value="${buildResultsDirectory}/testresults"/>
		</ant>
	</target>	
	<!--======================================================-->
	<!-- Gather build results  -->
	<!-- ==================================================== -->
	<target name="-prepareBuildResultsDirectory">
		<echo message="Creating ${buildResultsDirectory}" />
		<mkdir dir="${buildResultsDirectory}" />	
	</target>

	<!--======================================================-->
	<!-- Call External post build file if available -->
	<!-- ==================================================== -->
	<target name="callExternalPostBuild">
    	<property name="siteXmlFile" value="${UpdateSiteStagingLocation}/site.xml"/>

		<property file="${buildDirectory}/finalFeaturesVersions.properties" prefix="versions"/>
		<property name="version.full" value="${versions.org.erlide}-${buildType}"/>

       <antcall target="-generateUpdateSite"/>

    	<antcall target="-createNightlyBuildSiteXml"/>
    	<copy todir="${UpdateSiteFinalLocation}">
    		<fileset dir="${UpdateSiteStagingLocation}" includes="**"/>
    	</copy>
    	<zip destfile="${buildResultsDirectory}/updateSite-${version.full}.zip" basedir="${UpdateSiteFinalLocation}"/>
    	<delete dir="${UpdateSiteStagingLocation}/../.." includes="tmpUpdateSite/**" includeemptydirs="true"/>
	</target>
	
    <!--======================================================-->
    <!-- UpdateSite Export target, to be called from allElements  -->
    <!-- ==================================================== -->
    <target name="updateSiteExport">
        <ant antfile="build.xml" dir="${buildDirectory}/features/${id}/" target="build.update.jar">
            <property name="feature.destination" value="${UpdateSiteStagingLocation}/features"/>
            <property name="plugin.destination" value="${UpdateSiteStagingLocation}/plugins"/>
        </ant>
    </target>
    
    <target name="-generateUpdateSite">
        <!-- Create the directory structure -->
        <mkdir dir="${UpdateSiteStagingLocation}"/>
        <mkdir dir="${UpdateSiteStagingLocation}/features"/>
        <mkdir dir="${UpdateSiteStagingLocation}/plugins"/>
    	<condition property="jarProcessor.sign" value="true">
    		<istrue value="${signJars}"/>
    	</condition>
        <!-- Build the jar files -->
        <antcall target="allElements">
            <param name="genericTargets" value="${builder}/customTargets.xml"/>
            <param name="target" value="updateSiteExport"/>
        </antcall>
        <!-- site.xml files for integration and release builds are handled elsewhere -->
    </target>
	
    <target name="-createNightlyBuildSiteXml" if="isNightlyBuild">
    	<echo>${siteXmlFile}</echo>
        <echo file="${siteXmlFile}">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;site&gt;
		&lt;description&gt;Nightly builds for erlIDE&lt;/description&gt;
</echo>
		
    	<foreach list="${allFeatures}" delimiter="," target="-appendFeatureElement" param="featureId" inheritall="true"/> 
        <echo file="${siteXmlFile}" append="true">		&lt;category-def name=&quot;Nightly&quot;
            label=&quot;Nightly builds&quot;&gt;
		&lt;/category-def&gt;
&lt;/site&gt;</echo>
    </target>

	<target name="-appendFeatureElement">
		<!-- we can not rely on ${version.full} at this point since people could use
			a fix feature id like 0.5.0.qualifier. ${version.full} would only work if
			the feature were set to 0.0.0 --> 
		<propertycopy name="realFeatureVersion" from="versions.${featureId}"/>
		<echo file="${siteXmlFile}" append="true">		&lt;feature 
		url=&quot;features/${featureId}_${realFeatureVersion}.jar&quot; 
		id=&quot;${featureId}&quot; 
		version=&quot;${realFeatureVersion}&quot;&gt; 
    	&lt;category name=&quot;Nightly&quot;/&gt; 
		&lt;/feature&gt;
</echo>    	
    </target>
	
</project>
