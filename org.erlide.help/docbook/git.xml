<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0">
    <info>
        <title>Hacking erlide with Git</title>
        <author>
            <personname>
                <firstname>Vlad</firstname>
                <surname>Dumitrescu</surname>
            </personname>
            <email>vladdu55@gmail.com</email>
        </author>
        <copyright>
            <year>2009</year>
            <holder>Vlad Dumitrescu</holder>
        </copyright>
        <legalnotice>
            <para> This documentation is adapted from the pages written by <link
                    xlink:href="http://github.com/theory/">David E. Wheeler</link> for <link
                    xlink:href="http://wiki.github.com/bricoleurs/bricolage">bricolage</link> and is
                covered by a <link xlink:href="http://creativecommons.org/licenses/by-nc/3.0/"
                    >Creative Commons</link> license. Thanks a lot!</para>
        </legalnotice>
    </info>
    <annotation>
            <para>We haven't decided yet if we are going to fully migrate to Git, but this
                information might be useful even so.</para>
            <para>Note also that this repository (vladdu/erlide_test) is <emphasis>NOT</emphasis>
                the one that will be the reference one!</para>
    </annotation>
    <section xml:id="working">
        <title xml:id="working.title">Working with Git</title>
        
        <para>Welcome to the erlide Git repository. We hope you enjoy your stay. In the bad old
            days, the erlide repository was hosted by <link
                xlink:href="http://erlide.cvs.sourceforge.net/viewvc/erlide/erlide">SourceForge
                CVS</link>. Later we migrated to <link
                xlink:href="http://erlide.svn.sourceforge.net/svnroot/erlide">Subversion</link>.
            Today, we're on GitHub, with all of the history from the SVN repository intact and ready
            for you to get hacking. So what are you waiting for? <link
                xlink:href="http://github.com/vladdu/erlide/">Fork</link> and push!</para>


        <para>The erlide project follows the standard <link
                xlink:href="http://github.com/guides/fork-a-project-and-submit-your-modifications"
                >GitHub model</link> for contributions: <link
                xlink:href="http://github.com/vladdu/erlide/">fork</link> a project, clone it to
            your local computer, hack on it there, push your finished changes to your forked
            repository, and send a &#8220;Pull Request&#8221; back upstream to the project.
            If you're already familiar with this process, then <emphasis>congratulations</emphasis>!
            You're done here, <link xlink:href="http://github.com/vladdu/erlide/">get
            hacking</link>!</para>

        <section>
            <title>Contributing to erlide</title>
            <para>Still with me? Okay then, let's get you started hacking on erlide. The <link
                    xlink:href="http://github.com/guides/fork-a-project-and-submit-your-modifications"
                    >GitHub guide</link> for the standard fork/clone/push/pull request model of
                contributing is a great place to start, but we'll cover all the basics here, too, as
                well as various contribution scenarios (fixing bugs, adding features, updating
                documentation, etc.).</para>
        </section>
        <section>
            <title>Getting Started</title>
            <para>First, you'll need a GitHub account. If you don't have one, go and <link
                    xlink:href="https://github.com/signup/">sign up now</link>. I'll wait here while
                you do that...</para>

            <para>Okay, done? Great, now you need to <link
                    xlink:href="http://github.com/guides/providing-your-ssh-key">provide your SSH
                    key</link>. Go on, I'll wait again, no big deal...</para>
            <para>Back? Excellent! One more thing to do: you need to <link
                    xlink:href="http://git-scm.com/download">download and install</link> Git and
                then configure it. At a minimum, you'll want to set up your name and email address.
                Git doesn't rely on usernames like Subversion or CVS; you have to give it the whole
                cigar. Here's how:</para>


            <screen>
                git config --global user.name "Your Name Comes Here"
                git config --global user.email you@yourdomain.example.com
            </screen>
            <para>Just for the hell of it, you might want to turn on pretty colors, too, so that
                diffs, statuses, and branches are colored in your terminal:</para>
            <screen>
                git config --global color.diff auto
                git config --global color.status auto
                git config --global color.branch auto
            </screen>
            <para>I recommend to set the handling of line endings, because some of us are working on
                Windows and mixing line endings will create a mess:</para>
            <screen>
                git config --global core.autocrlf input
            </screen>
            <para>If you're familiar with Subversion, I highly recommend that you check out the
                    <link xlink:href="http://git.or.cz/course/svn.html">Git-SVN Crash Course</link>
                for more details like this.</para>

            <para>Okay, now you're ready to grab the erlide repository. Hit the <link
                    xlink:href="http://github.com/erliders/erlide/tree">erlide repository</link>
                page and click the <inlinemediaobject>
                    <imageobject>
                        <imagedata fileref="http://github.com/images/modules/repos/fork_button.png"
                        />
                    </imageobject>
                </inlinemediaobject> button. This will create a complete copy of the erlide
                repository within your GitHub account. Yeah, it's kind of like the old <link
                    xlink:href="http://en.wikipedia.org/wiki/Fork_(software_development)">scary
                    idea</link> of forking, but GitHub has made it an okay thing.
                    <emphasis>Really!</emphasis> Just trust me, okay? Okay, great.</para>

            <para>Now you've got your own fork. This is your own personal copy of the erlide source
                tree, and you can do anything you want with it. Sure, you could run with it in an
                entirely different direction, but the community would frown on that and baby kittens
                would cry. You're much more likely to fix bugs, add features, and maintain hacks
                that only your personal installation requires. It's all good.</para>

            <para>So let's get started. Git is a distributed version control system. Whereas in
                Subversion there was a Canonical repository living on a server somewhere, and you
                sent all your commits there, with Git, you <emphasis>clone</emphasis> a remote
                repository to your local computer, and work exclusively with your cloned copy. When
                you commit, you commit right on your hard disk (this is great for working on
                flights, BTW). When you've reached a spot where you're ready to send it to your
                remote copy of the repository, you <emphasis>push</emphasis> it there.</para>
            <para>Okay, lecture over, let's clone your fork of erlide. I'm assuming, of course, that
                you have <link xlink:href="http://git-scm.org/">Git</link> installed. Just switch to
                a directory where you want to keep your repository and do this, replacing
                &#8220;username&#8221; with your actual GitHub username:</para>


            <screen>
                git clone git@github.com:username/erlide.git
            </screen>
            <para>Congratulations! You now have your very own erlide repository. Now you'll want to
                make sure that you can always pull down changes from the upstream canonical
                repository. To do so, do this:</para>
            <screen>
                cd erlide
                git remote add upstream git://github.com/erliders/erlide.git 
                git fetch upstream
            </screen>
            <para>Anytime you want to merge in the latest changes from the upstream repository, just
                issue that <code>git fetch upstream</code> command and you'll be good to go.</para>
        </section>
        <section>
            <title>Where to Go From Here</title>
            <para>I'll be writing some other entries for how to perform some common tasks, such as
                fixing a bug, adding a feature, working in a maintenance branch, merging between
                branches, and undertaking a major project - and how to send your contributions
                upstream.</para>
            <itemizedlist>
                <listitem>
                    <para>
                        <link linkend="bugfix" endterm="bugfix.title"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="branches" endterm="branches.title"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="projectbranch" endterm="projectbranch.title"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="merging" endterm="merging.title"/>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <link linkend="email" endterm="email.title"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="hacks" endterm="hacks.title"/>
                    </para>
                </listitem>
            </itemizedlist>
        </section>
    </section>

    <section xml:id="bugfix">
        <title xml:id="bugfix.title">Contributing a Bug Fix</title>
        <para>This is a simple exercise for those interested in contributing to erlide. Say that you
            find a bug in erlide, or decide to fix an existing bug reported in our <link
                xlink:href="http://erlide.assembla.com/spaces/erlide/tickets">ticket tracker</link>.
            I&#8217;m assuming that the bug is in the main branch of the project, <link
                xlink:href="http://github.com/erliders/erlide/tree/master">master</link>. Assuming
            that you have read <link
                xlink:href="http://wiki.github.com/vladdu/erlide_test/working-with-git">Working with
                Git</link> and are ready to start hacking on your forked repository, let&#8217;s
            get started:</para>



        <screen>
                cd erlide
                git checkout master
                git pull origin
                git pull upstream master
            </screen>
        <para>What you&#8217;ve done here is to check out the master branch and to make sure
            that you have all the latest changes from both your forked repository on GitHub and from
            the erlide project&#8217;s upstream repository. Now you&#8217;re ready to fix
            the bug. All you have to do is create a new branch and start hacking:</para>
        <screen>
                git checkout -b 1449
            </screen>
        <para>This command creates a new local branch named “#1449” and checks it out.
            I&#8217;ve named it as such for the bug number. And I say “local branch” because it
            only exists in the local repository; think of it as a working branch to be used just for
            the duration of fixing the bug. So now, go ahead and fix it! As you work, commit early
            and commit often. You can use <code>git add</code> to add one or more files to commit
            and then commit them:</para>

        <screen>
                git add path/to/file.java
                git commit -m 'Fixed typo in `file.java`.
            </screen>
        <para>Or, to commit all your current changes at once, just use <code>git commit
            -a</code>:</para>
        <screen>
                git commit -am 'Removed the `id` field.'
            </screen>
        <para>Note that you can use <link
                xlink:href="http://github.github.com/github-flavored-markdown/">GitHub-Flavored
                Markdown</link> in your commit messages and they&#8217;ll be nicely formatted on
            the site. Also, we strongly recommend that you write <link
                xlink:href="http://www.tpope.net/node/106">Git-preferred commit messages</link>, as
            they will really help you to review older commits in the future.</para>

        <para>Also, there are <link xlink:href="http://git.or.cz/course/svn.html">some</link>
            <link xlink:href="http://www-cs-students.stanford.edu/~blynn/gitmagic/index.html"
                >great</link>
            <link xlink:href="http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html"
                >tutorials</link> and <link xlink:href="howtwo">howtows</link>
            <link xlink:href="http://book.git-scm.com/">out</link>
            <link xlink:href="http://www.kernel.org/pub/software/scm/git/docs/everyday.html"
                >there</link>, so check them out for more on day-to-day use of Git. Overall,
            you&#8217;ll want to commit in lots of small commits rather than one big final
            commit, so that you can easily go back and change things if you need to.</para>





        <para>Oh, and don&#8217;t forget to add a note to <code>CHANGES</code> and commit that,
            too!</para>
        <screen>
                git add CHANGES
                git commit -m 'Give credit where credit is you.'
            </screen>
        <para>When you&#8217;re done, the bug is fixed, and all tests pass, make sure everything
            is committed and then merge your changes back into master:</para>

        <screen>
                git checkout master
                git merge 1449
                git branch -d 1449
            </screen>
        <para>Great! You&#8217;ve merged all the changes from your branch, and dropped the
            branch since it&#8217;s no longer needed (all of the commits from the branch were
            played back into master, just as if you&#8217;d committed them there). Sure, for a
            simple bug fix you probably could have stayed in master. But with Git it&#8217;s
            just as easy to create a working branch for a single bug and work on it there, and only
            merge it back into master when you&#8217;re done, so that you keep things well
            compartmentalized.</para>
        <para>So far, all of your changes have been made to your local clone of your repository. Now
            it&#8217;s time to push them upstream to your fork on GitHub. Doing so is
            easy:</para>
        <screen>
                git push origin master
            </screen>
        <para>Now your own fork has the changes on GitHub, free to be pulled in by anyone else who
            has cloned your fork. But your aim, of course, is to get the bug fix into the project
            repository. Chances are good that a project administrator will see your bug fix merges
            sooner or later and simply pull them in.</para>

        <para>But if you&#8217;d like to alert them to the fix so that they pull it in sooner
            rather than later, hit the home page for your fork of the project and click the <inlinemediaobject>
                <imageobject>
                    <imagedata
                        fileref="http://github.com/images/modules/repos/pull_request_button.png"/>
                </imageobject>
            </inlinemediaobject> button. This will open up a lightbox window in which you can type
            up a message to the project administrators, perhaps something like:</para>
        <blockquote>
            <para>Fellow Erliders,</para>
            <para>I&#8217;ve fixed Bug #1449 in my fork. As you know, this is a particularly
                insidious bug that has effected a lot of our user base. I think it&#8217;d be
                worthwhile to pull it into the project repository in order to get it into the next
                release of erlide.</para>
            <para>Thanks!</para>
        </blockquote>
        <para>Be sure that the checkbox next to “erliders” is checked and then hit the “Send Pull
            Request” button. There, you&#8217;re done.</para>
    </section>
    <section xml:id="branches">
        <title xml:id="branches.title">Working with Branches</title>
        <para/>
    </section>
    <section xml:id="projectbranch">
        <title xml:id="projectbranch.title">Starting a Project Branch</title>
        <para/>
    </section>
    <section xml:id="merging">
        <title xml:id="merging.title">Merging with Git</title>
        <para/>
    </section>
    <section xml:id="email">
        <title xml:id="email.title">Contributing via Email</title>
        <para/>
    </section>
    <section xml:id="hacks">
        <title xml:id="hacks.title">Git Hacks</title>
        <para/>
    </section>
</article>
