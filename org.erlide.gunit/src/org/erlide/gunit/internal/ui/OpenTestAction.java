/*******************************************************************************
 * Copyright (c) 2000, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.erlide.gunit.internal.ui;

import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.texteditor.ITextEditor;
import org.erlide.core.erlang.ErlModelException;
import org.erlide.core.erlang.IErlElement;
import org.erlide.core.erlang.IErlFunction;
import org.erlide.core.erlang.IErlModule;
import org.erlide.core.erlang.IErlProject;
import org.erlide.core.erlang.ISourceRange;

/**
 * Open a class on a Test method.
 */
public class OpenTestAction extends OpenEditorAction {

	@SuppressWarnings("unused")
	private final String fMethodName;

	private ISourceRange fRange;

	public OpenTestAction(final TestRunnerViewPart testRunner,
			final String className, final String method) {
		this(testRunner, className, method, true);
	}

	public OpenTestAction(final TestRunnerViewPart testRunner,
			final String className) {
		this(testRunner, className, null);
	}

	public OpenTestAction(final TestRunnerViewPart testRunner,
			final String className, final String method, final boolean activate) {
		super(testRunner, className, activate);
		PlatformUI.getWorkbench().getHelpSystem().setHelp(this,
				IGUnitHelpContextIds.OPENTEST_ACTION);
		this.fMethodName = method;
	}

	@Override
	protected IErlElement findElement(final IErlProject project,
			final String className) throws ErlModelException {
		// IErlModule type = findType(project, className);
		// if (type == null)
		// return null;
		//
		// if (fMethodName == null)
		// return type;
		//
		// IMethod method = findMethod(type);
		// if (method == null) {
		// IErlModuleHierarchy typeHierarchy = type.newSupertypeHierarchy(null);
		// IErlModule[] types = typeHierarchy.getAllSuperclasses(type);
		// for (int i = 0; i < types.length; i++) {
		// method = findMethod(types[i]);
		// if (method != null)
		// break;
		// }
		// }
		// if (method == null) {
		// String title = JUnitMessages.OpenTestAction_error_title;
		// String message = Messages.format(
		// JUnitMessages.OpenTestAction_error_methodNoFound,
		// fMethodName);
		// MessageDialog.openInformation(getShell(), title, message);
		// return type;
		// }
		// fRange = method.getNameRange();
		// return method;
		return null;
	}

	IErlFunction findMethod(final IErlModule type) {
		// IStatus status = JavaConventions.validateMethodName(fMethodName,
		// JavaCore.VERSION_1_3, JavaCore.VERSION_1_3);
		// if (!status.isOK()) {
		// return null;
		// }
		// IMethod method = type.getMethod(fMethodName, new String[0]);
		// if (method != null && method.exists()) {
		// return method;
		// }
		return null;
	}

	@Override
	protected void reveal(final ITextEditor textEditor) {
		if (this.fRange != null) {
			textEditor.selectAndReveal(this.fRange.getOffset(), this.fRange
					.getLength());
		}
	}

}
